<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin Dashboard - AEM Notes</title>
    <link rel="stylesheet" href="/css/admin.css">
    <style>
        .dashboard-container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }
        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }
        .stat-card {
            background: #f8f9fa;
            padding: 20px;
            border-radius: 8px;
            border-left: 4px solid #007bff;
        }
        .stat-number {
            font-size: 2em;
            font-weight: bold;
            color: #007bff;
        }
        .upload-section {
            background: white;
            padding: 30px;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            margin-bottom: 30px;
        }
        .form-group {
            margin-bottom: 20px;
        }
        .form-group label {
            display: block;
            margin-bottom: 5px;
            font-weight: bold;
        }
        .form-group input, .form-group select, .form-group textarea {
            width: 100%;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 5px;
            font-size: 14px;
        }
        .btn {
            padding: 12px 24px;
            background: #007bff;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 16px;
        }
        .btn:hover {
            background: #0056b3;
        }
        .btn-secondary {
            background: #6c757d;
        }
        .btn-secondary:hover {
            background: #545b62;
        }
        .lectures-overview {
            background: white;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        .unit-section {
            margin-bottom: 25px;
            padding: 15px;
            border: 1px solid #e9ecef;
            border-radius: 5px;
        }
        .unit-title {
            color: #495057;
            margin-bottom: 10px;
            font-size: 18px;
        }
        .lecture-item {
            padding: 8px 12px;
            background: #f8f9fa;
            margin: 5px 0;
            border-radius: 4px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        .lecture-actions {
            display: flex;
            gap: 10px;
        }
        .btn-small {
            padding: 4px 8px;
            font-size: 12px;
        }
        .progress-bar {
            width: 100%;
            height: 20px;
            background: #e9ecef;
            border-radius: 10px;
            overflow: hidden;
            margin: 10px 0;
        }
        .progress-fill {
            height: 100%;
            background: #28a745;
            transition: width 0.3s ease;
        }
        #upload-progress {
            display: none;
        }
        .alert {
            padding: 15px;
            margin: 20px 0;
            border-radius: 5px;
        }
        .alert-success {
            background: #d4edda;
            color: #155724;
            border: 1px solid #c3e6cb;
        }
        .alert-error {
            background: #f8d7da;
            color: #721c24;
            border: 1px solid #f5c6cb;
        }
    </style>
</head>
<body>
    <div class="dashboard-container">
        <header style="margin-bottom: 30px;">
            <h1>Admin Dashboard</h1>
            <nav style="margin-top: 10px;">
                <a href="/" class="btn btn-secondary" style="text-decoration: none; margin-right: 10px;">View Site</a>
                <a href="/admin/editor" class="btn btn-secondary" style="text-decoration: none; margin-right: 10px;">HTML Editor</a>
                <a href="/logout" class="btn btn-secondary" style="text-decoration: none;">Logout</a>
            </nav>
        </header>

        <!-- Statistics Overview -->
        <div class="stats-grid">
            <div class="stat-card">
                <div class="stat-number"><%= totalLectures %></div>
                <div>Total Lectures</div>
            </div>
            <div class="stat-card">
                <div class="stat-number"><%= units.filter(unit => unit.lectures.length > 0).length %></div>
                <div>Active Units</div>
            </div>
            <div class="stat-card">
                <div class="stat-number"><%= units.length %></div>
                <div>Total Units</div>
            </div>
            <div class="stat-card">
                <div class="stat-number" id="completion-rate">
                    <%= Math.round((units.filter(unit => unit.lectures.length > 0).length / units.length) * 100) %>%
                </div>
                <div>Course Completion</div>
            </div>
        </div>

        <!-- Upload New Lecture Section -->
        <div class="upload-section">
            <h2>Upload New Lecture</h2>
            <form id="upload-form" enctype="multipart/form-data">
                <div class="form-group">
                    <label for="lectureTitle">Lecture Title:</label>
                    <input type="text" id="lectureTitle" name="lectureTitle" placeholder="Enter lecture title..." required>
                </div>
                
                <div class="form-group">
                    <label for="unit">Select Unit:</label>
                    <select id="unit" name="unit" required>
                        <% units.forEach(unit => { %>
                            <option value="<%= unit.id %>"><%= unit.title %></option>
                        <% }) %>
                    </select>
                </div>

                <div class="form-group">
                    <label for="pdfFile">Upload PDF:</label>
                    <input type="file" id="pdfFile" name="pdfFile" accept=".pdf" required>
                </div>

                <div class="form-group">
                    <label for="customPrompt">Custom AI Prompt (Optional):</label>
                    <textarea id="customPrompt" name="prompt" rows="4" placeholder="Leave empty to use default prompt, or provide custom instructions for the AI..."></textarea>
                </div>

                <div id="upload-progress">
                    <div class="progress-bar">
                        <div class="progress-fill" id="progress-fill"></div>
                    </div>
                    <p id="progress-text">Processing...</p>
                </div>

                <button type="submit" class="btn" id="upload-btn">Upload and Process</button>
            </form>

            <div id="upload-result"></div>
        </div>

        <!-- Lectures Overview by Unit -->
        <div class="lectures-overview">
            <h2>Current Lectures Overview</h2>
            
            <% units.forEach(unit => { %>
                <div class="unit-section">
                    <h3 class="unit-title"><%= unit.title %></h3>
                    
                    <% if (unit.lectures && unit.lectures.length > 0) { %>
                        <% unit.lectures.forEach(lecture => { %>
                            <div class="lecture-item">
                                <span><%= lecture.title %></span>
                                <div class="lecture-actions">
                                    <a href="/lectures/<%= lecture.id %>" target="_blank" class="btn btn-small">View</a>
                                    <button class="btn btn-small btn-secondary" onclick="editLecture('<%= lecture.id %>')">Edit</button>
                                    <button class="btn btn-small" style="background: #dc3545;" onclick="deleteLecture('<%= lecture.id %>')">Delete</button>
                                </div>
                            </div>
                        <% }) %>
                    <% } else { %>
                        <div class="lecture-item" style="background: #fff3cd; color: #856404;">
                            <span>No lectures uploaded yet</span>
                        </div>
                    <% } %>
                </div>
            <% }) %>
        </div>

        <!-- Quick Actions -->
        <div class="upload-section" style="margin-top: 30px;">
            <h2>Quick Actions</h2>
            <div style="display: flex; gap: 15px; flex-wrap: wrap;">
                <button class="btn" onclick="window.open('/admin/editor', '_blank')">HTML Editor</button>
                <button class="btn btn-secondary" onclick="exportAllLectures()">Export All Lectures</button>
                <button class="btn btn-secondary" onclick="backupContent()">Backup Content</button>
                <button class="btn btn-secondary" onclick="viewAnalytics()">View Analytics</button>
            </div>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const uploadForm = document.getElementById('upload-form');
            const uploadBtn = document.getElementById('upload-btn');
            const progressDiv = document.getElementById('upload-progress');
            const progressFill = document.getElementById('progress-fill');
            const progressText = document.getElementById('progress-text');
            const uploadResult = document.getElementById('upload-result');

            // Handle file upload form
            uploadForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                
                const formData = new FormData(uploadForm);
                
                // Show progress
                uploadBtn.disabled = true;
                uploadBtn.textContent = 'Processing...';
                progressDiv.style.display = 'block';
                uploadResult.innerHTML = '';
                
                // Simulate progress (since we can't track actual progress easily)
                let progress = 0;
                const progressInterval = setInterval(() => {
                    progress += Math.random() * 15;
                    if (progress > 90) progress = 90;
                    progressFill.style.width = progress + '%';
                }, 500);

                try {
                    const response = await fetch('/upload', {
                        method: 'POST',
                        body: formData
                    });

                    clearInterval(progressInterval);
                    progressFill.style.width = '100%';

                    const result = await response.json();

                    if (result.success) {
                        uploadResult.innerHTML = `
                            <div class="alert alert-success">
                                <strong>Success!</strong> ${result.message}
                                <br><a href="${result.pdfUrl}" target="_blank">View uploaded PDF</a>
                            </div>
                        `;
                        
                        // Reset form and refresh page after short delay
                        uploadForm.reset();
                        setTimeout(() => {
                            window.location.reload();
                        }, 2000);
                    } else {
                        uploadResult.innerHTML = `
                            <div class="alert alert-error">
                                <strong>Error:</strong> ${result.error}
                            </div>
                        `;
                    }
                } catch (error) {
                    clearInterval(progressInterval);
                    uploadResult.innerHTML = `
                        <div class="alert alert-error">
                            <strong>Error:</strong> Failed to upload file. Please try again.
                        </div>
                    `;
                } finally {
                    uploadBtn.disabled = false;
                    uploadBtn.textContent = 'Upload and Process';
                    progressDiv.style.display = 'none';
                    progressFill.style.width = '0%';
                }
            });

            // Auto-fill lecture title from filename
            document.getElementById('pdfFile').addEventListener('change', function(e) {
                const file = e.target.files[0];
                const titleInput = document.getElementById('lectureTitle');
                
                if (file && !titleInput.value) {
                    const filename = file.name.replace('.pdf', '').replace(/[-_]/g, ' ');
                    titleInput.value = filename.charAt(0).toUpperCase() + filename.slice(1);
                }
            });
        });

        // Lecture management functions
        function editLecture(lectureId) {
            window.open(`/admin/editor?lecture=${lectureId}`, '_blank');
        }

        function deleteLecture(lectureId) {
            if (confirm('Are you sure you want to delete this lecture? This action cannot be undone.')) {
                // Implement delete functionality
                fetch(`/admin/delete-lecture/${lectureId}`, {
                    method: 'DELETE',
                })
                .then(response => response.json())
                .then(result => {
                    if (result.success) {
                        location.reload();
                    } else {
                        alert('Failed to delete lecture: ' + result.error);
                    }
                });
            }
        }

        // Quick action functions
        function exportAllLectures() {
            window.open('/admin/export', '_blank');
        }

        function backupContent() {
            fetch('/admin/backup')
                .then(response => response.blob())
                .then(blob => {
                    const url = window.URL.createObjectURL(blob);
                    const a = document.createElement('a');
                    a.href = url;
                    a.download = `aem-notes-backup-${new Date().toISOString().split('T')[0]}.zip`;
                    document.body.appendChild(a);
                    a.click();
                    document.body.removeChild(a);
                    window.URL.revokeObjectURL(url);
                });
        }

        function viewAnalytics() {
            window.open('/admin/analytics', '_blank');
        }

        // Real-time updates (if needed)
        function refreshStats() {
            fetch('/api/lectures')
                .then(response => response.json())
                .then(data => {
                    // Update stats without full page reload
                    console.log('Updated lecture data:', data);
                });
        }

        // Refresh stats every 5 minutes
        setInterval(refreshStats, 300000);
    </script>
</body>
</html>