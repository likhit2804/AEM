<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin Dashboard - AEM Notes</title>
    <style>
        /* ===================== BASE RESET ===================== */
        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }

        /* ===================== BODY ===================== */
        body {
            background-color: #121212;
            color: #e0e0e0;
            line-height: 1.6;
            min-height: 100vh;
        }

        /* ===================== DASHBOARD CONTAINER ===================== */
        .dashboard-container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 30px;
        }

        /* ===================== HEADER ===================== */
        header {
            margin-bottom: 40px;
            padding-bottom: 20px;
            border-bottom: 2px solid #333;
        }

        header h1 {
            color: #4db8ff;
            font-size: 2.5rem;
            margin-bottom: 15px;
        }

        nav {
            margin-top: 15px;
            display: flex;
            gap: 15px;
            flex-wrap: wrap;
        }

        /* ===================== BUTTONS ===================== */
        .btn {
            padding: 12px 24px;
            background: #4db8ff;
            color: #121212;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-size: 14px;
            font-weight: 600;
            text-decoration: none;
            display: inline-block;
            transition: all 0.3s ease;
        }

        .btn:hover {
            background: #3498db;
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(77, 184, 255, 0.3);
        }

        .btn-secondary {
            background: #1e1e1e;
            color: #e0e0e0;
            border: 1px solid #333;
        }

        .btn-secondary:hover {
            background: #2d2d2d;
            border-color: #4db8ff;
            color: #4db8ff;
        }

        .btn-danger {
            background: #dc3545;
            color: white;
        }

        .btn-danger:hover {
            background: #c82333;
        }

        .btn-small {
            padding: 6px 12px;
            font-size: 12px;
        }

        .btn:disabled {
            opacity: 0.6;
            cursor: not-allowed;
            transform: none;
        }

        /* ===================== STATS GRID ===================== */
        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
            gap: 25px;
            margin-bottom: 40px;
        }

        .stat-card {
            background: #1c1c1c;
            padding: 25px;
            border-radius: 10px;
            border-left: 4px solid #4db8ff;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.3);
            transition: transform 0.3s ease, box-shadow 0.3s ease;
        }

        .stat-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 25px rgba(77, 184, 255, 0.2);
        }

        .stat-number {
            font-size: 2.5em;
            font-weight: bold;
            color: #4db8ff;
            margin-bottom: 5px;
        }

        .stat-label {
            color: #cfcfcf;
            font-size: 1.1rem;
        }

        /* ===================== SECTIONS ===================== */
        .upload-section, .lectures-overview {
            background: #1c1c1c;
            padding: 30px;
            border-radius: 10px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.5);
            margin-bottom: 30px;
        }

        .upload-section h2, .lectures-overview h2 {
            color: #4db8ff;
            margin-bottom: 25px;
            padding-bottom: 10px;
            border-bottom: 2px solid #333;
            font-size: 1.8rem;
        }

        /* ===================== FORM ELEMENTS ===================== */
        .form-group {
            margin-bottom: 20px;
        }

        .form-group label {
            display: block;
            margin-bottom: 8px;
            font-weight: 600;
            color: #e0e0e0;
            font-size: 1rem;
        }

        .form-group input, 
        .form-group select, 
        .form-group textarea {
            width: 100%;
            padding: 12px 15px;
            border: 1px solid #333;
            border-radius: 8px;
            font-size: 14px;
            background: #2a2a2a;
            color: #e0e0e0;
            transition: border-color 0.3s ease, box-shadow 0.3s ease;
        }

        .form-group input:focus,
        .form-group select:focus,
        .form-group textarea:focus {
            outline: none;
            border-color: #4db8ff;
            box-shadow: 0 0 0 3px rgba(77, 184, 255, 0.1);
        }

        .form-group textarea {
            resize: vertical;
            min-height: 100px;
        }

        /* ===================== PROGRESS BAR ===================== */
        .progress-bar {
            width: 100%;
            height: 25px;
            background: #2a2a2a;
            border-radius: 12px;
            overflow: hidden;
            margin: 15px 0;
            box-shadow: inset 0 2px 4px rgba(0, 0, 0, 0.3);
        }

        .progress-fill {
            height: 100%;
            background: linear-gradient(90deg, #4db8ff, #3498db);
            transition: width 0.3s ease;
            border-radius: 12px;
            position: relative;
        }

        .progress-fill::after {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);
            animation: shine 2s infinite;
        }

        @keyframes shine {
            0% { transform: translateX(-100%); }
            100% { transform: translateX(100%); }
        }

        #upload-progress {
            display: none;
            margin: 20px 0;
        }

        #progress-text {
            color: #cfcfcf;
            text-align: center;
            margin-top: 10px;
            font-weight: 500;
        }

        /* ===================== UNIT SECTIONS ===================== */
        .unit-section {
            margin-bottom: 30px;
            padding: 20px;
            border: 1px solid #333;
            border-radius: 8px;
            background: #242424;
        }

        .unit-title {
            color: #4db8ff;
            margin-bottom: 15px;
            font-size: 1.4rem;
            font-weight: 600;
        }

        .lecture-item {
            padding: 12px 16px;
            background: #1e1e1e;
            margin: 8px 0;
            border-radius: 6px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            border: 1px solid #333;
            transition: all 0.3s ease;
        }

        .lecture-item:hover {
            background: #2d2d2d;
            border-color: #4db8ff;
            transform: translateX(5px);
        }

        .lecture-name {
            color: #e0e0e0;
            font-weight: 500;
        }

        .lecture-actions {
            display: flex;
            gap: 8px;
        }

        .empty-unit {
            background: #2d1810;
            color: #ffc107;
            border: 1px solid #f0ad4e;
            font-style: italic;
        }

        /* ===================== ALERTS ===================== */
        .alert {
            padding: 15px 20px;
            margin: 20px 0;
            border-radius: 8px;
            font-weight: 500;
        }

        .alert-success {
            background: #155724;
            color: #d4edda;
            border: 1px solid #28a745;
        }

        .alert-error {
            background: #721c24;
            color: #f8d7da;
            border: 1px solid #dc3545;
        }

        /* ===================== QUICK ACTIONS ===================== */
        .quick-actions {
            display: flex;
            gap: 15px;
            flex-wrap: wrap;
            margin-top: 20px;
        }

        /* ===================== RESPONSIVE ===================== */
        @media (max-width: 768px) {
            .dashboard-container {
                padding: 20px;
            }

            .stats-grid {
                grid-template-columns: 1fr;
                gap: 15px;
            }

            .upload-section, .lectures-overview {
                padding: 20px;
            }

            nav {
                flex-direction: column;
                gap: 10px;
            }

            .lecture-item {
                flex-direction: column;
                gap: 10px;
                align-items: flex-start;
            }

            .lecture-actions {
                align-self: flex-end;
            }

            .quick-actions {
                flex-direction: column;
            }

            .btn {
                text-align: center;
            }
        }

        /* ===================== LIGHT THEME (Optional) ===================== */
        body.light-theme {
            background-color: #f5f5f5;
            color: #222;
        }

        body.light-theme .stat-card,
        body.light-theme .upload-section,
        body.light-theme .lectures-overview {
            background: #ffffff;
            color: #222;
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
        }

        body.light-theme .unit-section {
            background: #f9f9f9;
            border-color: #ddd;
        }

        body.light-theme .lecture-item {
            background: #f0f0f0;
            border-color: #ddd;
        }

        body.light-theme .lecture-item:hover {
            background: #e9ecef;
            border-color: #0077cc;
        }

        body.light-theme .form-group input,
        body.light-theme .form-group select,
        body.light-theme .form-group textarea {
            background: #fff;
            color: #222;
            border-color: #ddd;
        }

        body.light-theme .progress-bar {
            background: #e9ecef;
        }

        body.light-theme .btn-secondary {
            background: #f8f9fa;
            color: #222;
            border-color: #ddd;
        }

        body.light-theme .btn-secondary:hover {
            background: #e9ecef;
            border-color: #0077cc;
            color: #0077cc;
        }
    </style>
</head>
<body>
    <div class="dashboard-container">
        <header>
            <h1>Admin Dashboard</h1>
            <nav>
                <a href="/" class="btn btn-secondary">View Site</a>
                <a href="/admin/editor" class="btn btn-secondary">HTML Editor</a>
                <a href="/logout" class="btn btn-secondary">Logout</a>
            </nav>
        </header>

        <!-- Statistics Overview -->
        <div class="stats-grid">
            <div class="stat-card">
                <div class="stat-number"><%= totalLectures %></div>
                <div class="stat-label">Total Lectures</div>
            </div>
            <div class="stat-card">
                <div class="stat-number"><%= units.filter(unit => unit.lectures.length > 0).length %></div>
                <div class="stat-label">Active Units</div>
            </div>
            <div class="stat-card">
                <div class="stat-number"><%= units.length %></div>
                <div class="stat-label">Total Units</div>
            </div>
            <div class="stat-card">
                <div class="stat-number" id="completion-rate">
                    <%= Math.round((units.filter(unit => unit.lectures.length > 0).length / units.length) * 100) %>%
                </div>
                <div class="stat-label">Course Completion</div>
            </div>
        </div>

        <!-- Upload New Lecture Section -->
        <div class="upload-section">
            <h2>Upload New Lecture</h2>
            <form id="upload-form" enctype="multipart/form-data">
                <div class="form-group">
                    <label for="lectureTitle">Lecture Title:</label>
                    <input type="text" id="lectureTitle" name="lectureTitle" placeholder="Enter lecture title..." required>
                </div>
                
                <div class="form-group">
                    <label for="unit">Select Unit:</label>
                    <select id="unit" name="unit" required>
                        <% units.forEach(unit => { %>
                            <option value="<%= unit.id %>"><%= unit.title %></option>
                        <% }) %>
                    </select>
                </div>

                <div class="form-group">
                    <label for="pdfFile">Upload PDF:</label>
                    <input type="file" id="pdfFile" name="pdfFile" accept=".pdf" required>
                </div>

                <div class="form-group">
                    <label for="customPrompt">Custom AI Prompt (Optional):</label>
                    <textarea id="customPrompt" name="prompt" placeholder="Leave empty to use default prompt, or provide custom instructions for the AI..."></textarea>
                </div>

                <div id="upload-progress">
                    <div class="progress-bar">
                        <div class="progress-fill" id="progress-fill"></div>
                    </div>
                    <p id="progress-text">Processing...</p>
                </div>

                <button type="submit" class="btn" id="upload-btn">Upload and Process</button>
            </form>

            <div id="upload-result"></div>
        </div>

        <!-- Lectures Overview by Unit -->
        <div class="lectures-overview">
            <h2>Current Lectures Overview</h2>
            
            <% units.forEach(unit => { %>
                <div class="unit-section">
                    <h3 class="unit-title"><%= unit.title %></h3>
                    
                    <% if (unit.lectures && unit.lectures.length > 0) { %>
                        <% unit.lectures.forEach(lecture => { %>
                            <div class="lecture-item">
                                <span class="lecture-name"><%= lecture.title %></span>
                                <div class="lecture-actions">
                                    <a href="/lectures/<%= lecture.id %>" target="_blank" class="btn btn-small">View</a>
                                    <button class="btn btn-small btn-secondary" onclick="editLecture('<%= lecture.id %>')">Edit</button>
                                    <button class="btn btn-small btn-danger" onclick="deleteLecture('<%= lecture.id %>')">Delete</button>
                                </div>
                            </div>
                        <% }) %>
                    <% } else { %>
                        <div class="lecture-item empty-unit">
                            <span>No lectures uploaded yet</span>
                        </div>
                    <% } %>
                </div>
            <% }) %>
        </div>

    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const uploadForm = document.getElementById('upload-form');
            const uploadBtn = document.getElementById('upload-btn');
            const progressDiv = document.getElementById('upload-progress');
            const progressFill = document.getElementById('progress-fill');
            const progressText = document.getElementById('progress-text');
            const uploadResult = document.getElementById('upload-result');

            // Handle file upload form
            uploadForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                
                const formData = new FormData(uploadForm);
                
                // Show progress
                uploadBtn.disabled = true;
                uploadBtn.textContent = 'Processing...';
                progressDiv.style.display = 'block';
                uploadResult.innerHTML = '';
                
                // Simulate progress (since we can't track actual progress easily)
                let progress = 0;
                const progressInterval = setInterval(() => {
                    progress += Math.random() * 15;
                    if (progress > 90) progress = 90;
                    progressFill.style.width = progress + '%';
                }, 500);

                try {
                    const response = await fetch('/upload', {
                        method: 'POST',
                        body: formData
                    });

                    clearInterval(progressInterval);
                    progressFill.style.width = '100%';

                    const result = await response.json();

                    if (result.success) {
                        uploadResult.innerHTML = `
                            <div class="alert alert-success">
                                <strong>Success!</strong> ${result.message}
                                <br><a href="${result.pdfUrl}" target="_blank" style="color: #d4edda; text-decoration: underline;">View uploaded PDF</a>
                            </div>
                        `;
                        
                        // Reset form and refresh page after short delay
                        uploadForm.reset();
                        setTimeout(() => {
                            window.location.reload();
                        }, 2000);
                    } else {
                        uploadResult.innerHTML = `
                            <div class="alert alert-error">
                                <strong>Error:</strong> ${result.error}
                            </div>
                        `;
                    }
                } catch (error) {
                    clearInterval(progressInterval);
                    uploadResult.innerHTML = `
                        <div class="alert alert-error">
                            <strong>Error:</strong> Failed to upload file. Please try again.
                        </div>
                    `;
                } finally {
                    uploadBtn.disabled = false;
                    uploadBtn.textContent = 'Upload and Process';
                    progressDiv.style.display = 'none';
                    progressFill.style.width = '0%';
                }
            });

            // Auto-fill lecture title from filename
            document.getElementById('pdfFile').addEventListener('change', function(e) {
                const file = e.target.files[0];
                const titleInput = document.getElementById('lectureTitle');
                
                if (file && !titleInput.value) {
                    const filename = file.name.replace('.pdf', '').replace(/[-_]/g, ' ');
                    titleInput.value = filename.charAt(0).toUpperCase() + filename.slice(1);
                }
            });
        });

        // Lecture management functions
        function editLecture(lectureId) {
            window.open(`/admin/editor?lecture=${lectureId}`, '_blank');
        }

        function deleteLecture(lectureId) {
            if (confirm('Are you sure you want to delete this lecture? This action cannot be undone.')) {
                // Implement delete functionality
                fetch(`/admin/delete-lecture/${lectureId}`, {
                    method: 'DELETE',
                })
                .then(response => response.json())
                .then(result => {
                    if (result.success) {
                        location.reload();
                    } else {
                        alert('Failed to delete lecture: ' + result.error);
                    }
                });
            }
        }

       

        // Real-time updates (if needed)
        function refreshStats() {
            fetch('/api/lectures')
                .then(response => response.json())
                .then(data => {
                    // Update stats without full page reload
                    console.log('Updated lecture data:', data);
                });
        }

        // Refresh stats every 5 minutes
        setInterval(refreshStats, 300000);
    </script>
</body>
</html>